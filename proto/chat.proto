syntax = "proto3";

package chat;

option go_package = "github.com/felguerez/grpchat/internal/chat;chat";

// ChatService provides methods for chat interactions.
service ChatService {
    // SendMessage sends a chat message to a conversation.
    rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);

    // CreateConversation creates a new chat room.
    rpc CreateConversation(CreateConversationRequest) returns (CreateConversationResponse);

    // JoinConversation joins a user to a chat room and streams messages.
    rpc JoinConversation(JoinConversationRequest) returns (JoinConversationResponse);

    rpc GetConversation(GetConversationRequest) returns (GetConversationResponse);

    // GetConversations returns conversations for a given user
    rpc GetConversations(GetConversationsRequest) returns (GetConversationsResponse);
    rpc ChatStream (stream SendMessageRequest) returns (stream SendMessageRequest);
}

// Request to send a message.
message SendMessageRequest {
    string user_id = 1;  // ID of the user sending the message.
    string content = 2;  // Content of the message.
    string conversation_id = 3;   // ID of the conversation to which the message is sent.
}

// Response after sending a message.
message SendMessageResponse {
    string status = 1;  // Status of the message send operation.
}

message Message {
    string user_id = 1;
    string content = 2;
    string conversation_id = 3;
}

// Request to join a conversation.
message JoinConversationRequest {
    string conversation_id = 1;  // ID of the conversation to join.
    string user_id = 2;         // ID of the user joining the conversation.
}

// Response after joining a conversation.
message JoinConversationResponse {
    string status = 1;
}

// Request to create a new conversation.
message CreateConversationRequest {
    string name = 1;      // Name of the new conversation.
    string owner_id = 2;  // ID of the user who will own the conversation.
    repeated string members = 3;
}

// Response after creating a new conversation.
message CreateConversationResponse {
    string conversation_id = 1;  // ID of the newly created conversation.
}

message Conversation {
    string id = 1;
    string name = 2;
    string owner_id = 3;
    repeated string members = 4;
}

message GetConversationRequest {
    string conversation_id = 1;
}

message GetConversationResponse {
    Conversation conversation = 1;
    repeated Message messages = 2;
}

message GetConversationsRequest {
    string user_id = 1;  // Optional: ID of the user whose conversations to retrieve.
    int32 limit = 2;     // Optional: Maximum number of conversations to return.
    string sort_by = 3;  // Optional: Field by which to sort the conversations. Could be "CreatedAt" or "UpdatedAt".
}

message GetConversationsResponse {
    repeated Conversation conversations = 1;
}